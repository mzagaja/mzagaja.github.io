---
layout: post
title: Civic Tech Stacks
---
Mark Headd shared an interesting thought on Thursday:
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thursday hot take: a limiting factor on the ability of <a href="https://twitter.com/hashtag/civictech?src=hash&amp;ref_src=twsrc%5Etfw">#civictech</a> to help improve government digital services is the dearth of experience (and interest) in the tech stacks most commonly used inside government agencies.</p>&mdash; Mark Headd (@mheadd) <a href="https://twitter.com/mheadd/status/1070695685543157762?ref_src=twsrc%5Etfw">December 6, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Which I then briefly replied to:
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If we’re all going to re-learn Javascript every six months is .Net really that painful? In my experience legacy code bases are haunted less by the language itself than poor coding practices used by people who code in them (i.e. obtuse variable names).</p>&mdash; Matt Zagaja (@mzagaja) <a href="https://twitter.com/mzagaja/status/1070710106399129602?ref_src=twsrc%5Etfw">December 6, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

However Chris Whong at NYC Planning Labs weighed in with an important point as well:
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">This feels backwards to me. The inflexible/inaccessible nature of the stacks I have encountered in gov is the barrier. But you’re right, I have neither experience or interest in working in a locked-down windows enterprise environment.</p>&mdash; Chris Whong (@chris_whong) <a href="https://twitter.com/chris_whong/status/1070800190741860357?ref_src=twsrc%5Etfw">December 6, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Technology is a tribal industry. Apple and Microsoft continue to fight for the desktop market. Apple and Google fight for the smartphone market. Users of technology are used to having choices, and are passionate about the choices they make. This extends to software development where folks often find a programming language and framework they love like [Ruby on Rails](https://rubyonrails.com/) and attempt to find employment coding in that framework. Greater adoption by others of your technology stack means more options and often a brighter future for you. Your opportunities grow with the size of your tribe.

A challenge software developers face is how frequently software development tools, languages, and preferences are changing. One of the most popular programming languages, Javascript, adds features more quickly than many browsers add support for those features. A software developer gets excited about using a backtick to denote something in their code but then has to implement a polyfill. A polyfill means having a tool re-write the code in a different way to get it to work in different browsers. This lack of uniformity means the developer needs to think about tools to automatically translate code for different browsers, or think about and code their Javascript in different ways if they want to use the latest features. Spending time on this axis of complexity becomes a tax on every project developed in Javascript going forward.

After years of software development many developers have used multiple languages and technologies. They become polyglots. They learn concepts that are portable from one language to another and when they have a specific project they will sit down and learn a new language and its libraries. Modern consultancies like Pivotal Labs use pair programming to reduce the amount of time needed for a developer to pick up a new technology. This agnostic approach means flexibility for the developer in picking their projects, but it is not free. The tuition of learning debugging tools, language syntax, and libraries must be paid along the way. Polyglots sacrifice time and familiarity for freedom.

The challenge Mark highlights is that many programmers are not polyglots. Even if they can learn other languages they are not agnostic towards what they use. The consequence is if a developer sees a job requires they program in Microsoft Visual Basic .Net but they like writing Python, the developer will often decline to apply for the job. Software development hiring pools become language segregated. In Civic Tech this means organizations that do not adopt fashionable languages cannot hire talent trained in modern software development processes. Solutions developed by one software community can fail to proliferate to others. **Poor quality software is built not because of technical limitations of a language, but because of the bad practices used by the developers that adopt that tool set.**

If we are going to succeed at building better software for government, government and software developers must meet in the middle. A North Star of government should be making sure its new software infrastructure is written in modern open source languages. This will increase the hiring pool and reduce the learning curve for new projects. At the same time developers need to learn the old languages and tools to re-write or interface with old systems. Harry Potter would not have been as successful if it was only available in English, and Civic Tech will not succeed if it is only available in Javascript.
